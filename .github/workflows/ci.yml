name: CI Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

env:
  JAVA_VERSION: '17'
  MAVEN_ARGS: '-B -V'


jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: ${{ env.JAVA_VERSION }}
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        run: mvn ${{ env.MAVEN_ARGS }} package
      - name: Run tests
        run: mvn ${{ env.MAVEN_ARGS }} test
      - name: Run integration tests
        run: mvn ${{ env.MAVEN_ARGS }} verify


      # - name: Start Kafka for integration tests
      #   run: |
      #   docker-compose -f docker/kafka/docker-compose.yml up -d
      #   sleep 30

      # - name: Run integration tests
      #   run: |
      #   mvn ${{ env.MAVEN_ARGS }} verify -Dspring.profiles.active=test

      # - name: Generate test report
      #   uses: dorny/test-reporter@v1
      #   if: success() || failure()
      #   with:
      #     name: Maven Tests
      #     path: '**/target/surefire-reports/*.xml'
      #     reporter: java-junit

      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     files: ./target/site/jacoco/jacoco.xml
      #     flags: unittests
      #     name: codecov-umbrella

      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: ${{ env.JAVA_VERSION }}
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          
      - name: Build application
        run: |
          mvn ${{ env.MAVEN_ARGS }} package -DskipTests

      # - name: Build Docker image
      #   run: |
      #     docker build -t order-service:${{ github.sha }} ./order-service
      #     docker build -t inventory-service:${{ github.sha }} ./inventory-service
      #     docker build -t payment-service:${{ github.sha }} ./payment-service
      #     docker build -t notification-service:${{ github.sha }} ./notification-service

      # - name: Log in to Docker Hub
      #   run: |
      #     echo ${{ secrets.DOCKER_REGISTRY_PASSWORD }} | docker login -u ${{ secrets.DOCKER_REGISTRY_USERNAME }} --password-stdin

      # - name: Push Docker images
      #   if: github.ref == 'refs/heads/master'
      #   run: |
      #     docker tag order-service:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/order-service:${{ github.sha }}
      #     docker tag inventory-service:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/inventory-service:${{ github.sha }}
      #     docker tag payment-service:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/payment-service:${{ github.sha }}
      #     docker tag notification-service:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/notification-service:${{ github.sha }}
          
      #     docker push ${{ secrets.DOCKER_USERNAME }}/order-service:${{ github.sha }}
      #     docker push ${{ secrets.DOCKER_USERNAME }}/inventory-service:${{ github.sha }}
      #     docker push ${{ secrets.DOCKER_USERNAME }}/payment-service:${{ github.sha }}
      #     docker push ${{ secrets.DOCKER_USERNAME }}/notification-service:${{ github.sha }}

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'